Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DotnetApiSample.Arn}/invocations
              responses: {}
          /{proxy+}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DotnetApiSample.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
        DefaultAuthorizer: CognitoAuthorizer
      Cors:
        MaxAge: 5
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      UserPoolName: !Sub ${AWS::StackName}-UserPool
  LambdaStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-lambdasto-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  LambdaStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LambdaStorage
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt LambdaStorage.Arn
              - !Sub ${LambdaStorage.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  DotnetApiSample:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: DotnetApiSample
      CodeUri: ../LambdaMinimalAPI
      Handler: LambdaMinimalAPI
      Runtime: dotnet6
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Events:
        ApiGET:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref Api
        ApiGETproxy:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: GET
            RestApiId: !Ref Api
      Policies: AWSLambda_FullAccess
      Environment:
        Variables:
          Cognito__AWSRegion: !Sub ${AWS::Region}
          Cognito__AppClientId: 719dfncn558c9nnhcim69bmkea
          Cognito__UserPoolId: eu-central-1_niCFCUwSH
  DotnetApiSampleLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${DotnetApiSample}
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: LambdaAPI
      Members:
        - LambdaStorage
        - DotnetApiSample